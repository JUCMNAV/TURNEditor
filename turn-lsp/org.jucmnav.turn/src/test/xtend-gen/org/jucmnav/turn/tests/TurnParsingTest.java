/**
 * generated by Xtext 2.18.0
 */
package org.jucmnav.turn.tests;

import com.google.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.extensions.InjectionExtension;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.jucmnav.turn.tests.TurnInjectorProvider;
import org.jucmnav.turn.turn.URNspec;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;

@ExtendWith(InjectionExtension.class)
@InjectWith(TurnInjectorProvider.class)
@SuppressWarnings("all")
public class TurnParsingTest {
  @Inject
  private ParseHelper<URNspec> parseHelper;
  
  @Test
  public void loadModel() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("urnModel example");
      _builder.newLine();
      _builder.newLine();
      _builder.append("actor A#\"Teacher\" {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("importance 100");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("softgoal Motivation#\"Increaase Motivation\" {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("contributesTo Productivity correlated with make");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("dependsOn B.Guide");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("softgoal Productivity#\"Increase Productivity\" {");
      _builder.newLine();
      _builder.append("       ");
      _builder.append("dependsOn Task");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("task Task#\"Task\"{   ");
      _builder.newLine();
      _builder.append("     ");
      _builder.append("contributesTo Motivation correlated with 90");
      _builder.newLine();
      _builder.append("     ");
      _builder.append("dependsOn abc.Respect");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("actor B#\"Student\"{  ");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("softgoal Guide#\"Guide\"");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("{ }");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("actor abc#\"Parent\"{");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("goal Respect#\"Respect\"{}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.newLine();
      _builder.newLine();
      _builder.append("strategy abc#\"ABC\"{");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("A.Motivation exceeding evaluation satisfied");
      _builder.newLine();
      _builder.append("   ");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final URNspec result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
