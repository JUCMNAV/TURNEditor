/**
 * generated by Xtext 2.18.0
 */
package org.jucmnav.turn.turn.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import org.jucmnav.turn.turn.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see org.jucmnav.turn.turn.TurnPackage
 * @generated
 */
public class TurnAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static TurnPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TurnAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = TurnPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TurnSwitch<Adapter> modelSwitch =
    new TurnSwitch<Adapter>()
    {
      @Override
      public Adapter caseURNspec(URNspec object)
      {
        return createURNspecAdapter();
      }
      @Override
      public Adapter caseConcreteURNspec(ConcreteURNspec object)
      {
        return createConcreteURNspecAdapter();
      }
      @Override
      public Adapter caseConcern(Concern object)
      {
        return createConcernAdapter();
      }
      @Override
      public Adapter caseCondition(Condition object)
      {
        return createConditionAdapter();
      }
      @Override
      public Adapter caseConcreteCondition(ConcreteCondition object)
      {
        return createConcreteConditionAdapter();
      }
      @Override
      public Adapter caseURNlink(URNlink object)
      {
        return createURNlinkAdapter();
      }
      @Override
      public Adapter caseMetadata(Metadata object)
      {
        return createMetadataAdapter();
      }
      @Override
      public Adapter caseURNmodelElement(URNmodelElement object)
      {
        return createURNmodelElementAdapter();
      }
      @Override
      public Adapter caseArtificialRule(ArtificialRule object)
      {
        return createArtificialRuleAdapter();
      }
      @Override
      public Adapter caseText(Text object)
      {
        return createTextAdapter();
      }
      @Override
      public Adapter caseLongName(LongName object)
      {
        return createLongNameAdapter();
      }
      @Override
      public Adapter caseActor(Actor object)
      {
        return createActorAdapter();
      }
      @Override
      public Adapter caseIntentionalElement(IntentionalElement object)
      {
        return createIntentionalElementAdapter();
      }
      @Override
      public Adapter caseElementLink(ElementLink object)
      {
        return createElementLinkAdapter();
      }
      @Override
      public Adapter caseContribution(Contribution object)
      {
        return createContributionAdapter();
      }
      @Override
      public Adapter caseDecomposition(Decomposition object)
      {
        return createDecompositionAdapter();
      }
      @Override
      public Adapter caseDependency(Dependency object)
      {
        return createDependencyAdapter();
      }
      @Override
      public Adapter caseStrategiesGroup(StrategiesGroup object)
      {
        return createStrategiesGroupAdapter();
      }
      @Override
      public Adapter caseEvaluationStrategy(EvaluationStrategy object)
      {
        return createEvaluationStrategyAdapter();
      }
      @Override
      public Adapter caseConcreteStrategy(ConcreteStrategy object)
      {
        return createConcreteStrategyAdapter();
      }
      @Override
      public Adapter caseEvaluation(Evaluation object)
      {
        return createEvaluationAdapter();
      }
      @Override
      public Adapter caseIndicatorEvaluation(IndicatorEvaluation object)
      {
        return createIndicatorEvaluationAdapter();
      }
      @Override
      public Adapter caseIndicatorConversion(IndicatorConversion object)
      {
        return createIndicatorConversionAdapter();
      }
      @Override
      public Adapter caseLinearConversion(LinearConversion object)
      {
        return createLinearConversionAdapter();
      }
      @Override
      public Adapter caseQualToQMappings(QualToQMappings object)
      {
        return createQualToQMappingsAdapter();
      }
      @Override
      public Adapter caseQualToQMapping(QualToQMapping object)
      {
        return createQualToQMappingAdapter();
      }
      @Override
      public Adapter caseContributionContextGroup(ContributionContextGroup object)
      {
        return createContributionContextGroupAdapter();
      }
      @Override
      public Adapter caseContributionContext(ContributionContext object)
      {
        return createContributionContextAdapter();
      }
      @Override
      public Adapter caseContributionChange(ContributionChange object)
      {
        return createContributionChangeAdapter();
      }
      @Override
      public Adapter caseUCMmap(UCMmap object)
      {
        return createUCMmapAdapter();
      }
      @Override
      public Adapter casePath(Path object)
      {
        return createPathAdapter();
      }
      @Override
      public Adapter caseStartPoint(StartPoint object)
      {
        return createStartPointAdapter();
      }
      @Override
      public Adapter casePathBody(PathBody object)
      {
        return createPathBodyAdapter();
      }
      @Override
      public Adapter casePathBodyNode(PathBodyNode object)
      {
        return createPathBodyNodeAdapter();
      }
      @Override
      public Adapter caseRegularEnd(RegularEnd object)
      {
        return createRegularEndAdapter();
      }
      @Override
      public Adapter caseEndpointWithConnect(EndpointWithConnect object)
      {
        return createEndpointWithConnectAdapter();
      }
      @Override
      public Adapter caseReferencedEnd(ReferencedEnd object)
      {
        return createReferencedEndAdapter();
      }
      @Override
      public Adapter caseRespRef(RespRef object)
      {
        return createRespRefAdapter();
      }
      @Override
      public Adapter caseOrJoin(OrJoin object)
      {
        return createOrJoinAdapter();
      }
      @Override
      public Adapter caseAndJoin(AndJoin object)
      {
        return createAndJoinAdapter();
      }
      @Override
      public Adapter caseWaitingPlace(WaitingPlace object)
      {
        return createWaitingPlaceAdapter();
      }
      @Override
      public Adapter caseTimer(Timer object)
      {
        return createTimerAdapter();
      }
      @Override
      public Adapter caseConnect(Connect object)
      {
        return createConnectAdapter();
      }
      @Override
      public Adapter caseConnectElement(ConnectElement object)
      {
        return createConnectElementAdapter();
      }
      @Override
      public Adapter caseFailurePoint(FailurePoint object)
      {
        return createFailurePointAdapter();
      }
      @Override
      public Adapter caseEndPoint(EndPoint object)
      {
        return createEndPointAdapter();
      }
      @Override
      public Adapter caseOrFork(OrFork object)
      {
        return createOrForkAdapter();
      }
      @Override
      public Adapter caseOrBody(OrBody object)
      {
        return createOrBodyAdapter();
      }
      @Override
      public Adapter caseRegularOrFork(RegularOrFork object)
      {
        return createRegularOrForkAdapter();
      }
      @Override
      public Adapter caseAndFork(AndFork object)
      {
        return createAndForkAdapter();
      }
      @Override
      public Adapter caseStub(Stub object)
      {
        return createStubAdapter();
      }
      @Override
      public Adapter caseStubParameters(StubParameters object)
      {
        return createStubParametersAdapter();
      }
      @Override
      public Adapter caseStubDeclaration(StubDeclaration object)
      {
        return createStubDeclarationAdapter();
      }
      @Override
      public Adapter caseStubOutPath(StubOutPath object)
      {
        return createStubOutPathAdapter();
      }
      @Override
      public Adapter casePluginBinding(PluginBinding object)
      {
        return createPluginBindingAdapter();
      }
      @Override
      public Adapter caseComponentRef(ComponentRef object)
      {
        return createComponentRefAdapter();
      }
      @Override
      public Adapter caseBoundOption(BoundOption object)
      {
        return createBoundOptionAdapter();
      }
      @Override
      public Adapter caseBoundElement(BoundElement object)
      {
        return createBoundElementAdapter();
      }
      @Override
      public Adapter caseReferencedBoundElement(ReferencedBoundElement object)
      {
        return createReferencedBoundElementAdapter();
      }
      @Override
      public Adapter caseLongBoundElement(LongBoundElement object)
      {
        return createLongBoundElementAdapter();
      }
      @Override
      public Adapter caseBinding(Binding object)
      {
        return createBindingAdapter();
      }
      @Override
      public Adapter caseInBinding(InBinding object)
      {
        return createInBindingAdapter();
      }
      @Override
      public Adapter caseOutBinding(OutBinding object)
      {
        return createOutBindingAdapter();
      }
      @Override
      public Adapter caseComponentBinding(ComponentBinding object)
      {
        return createComponentBindingAdapter();
      }
      @Override
      public Adapter caseFailureLabel(FailureLabel object)
      {
        return createFailureLabelAdapter();
      }
      @Override
      public Adapter caseScenarioGroup(ScenarioGroup object)
      {
        return createScenarioGroupAdapter();
      }
      @Override
      public Adapter caseScenarioDef(ScenarioDef object)
      {
        return createScenarioDefAdapter();
      }
      @Override
      public Adapter caseInitialization(Initialization object)
      {
        return createInitializationAdapter();
      }
      @Override
      public Adapter caseVariable(Variable object)
      {
        return createVariableAdapter();
      }
      @Override
      public Adapter caseEnumerationType(EnumerationType object)
      {
        return createEnumerationTypeAdapter();
      }
      @Override
      public Adapter casePathBodyNodes(PathBodyNodes object)
      {
        return createPathBodyNodesAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link org.jucmnav.turn.turn.URNspec <em>UR Nspec</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jucmnav.turn.turn.URNspec
   * @generated
   */
  public Adapter createURNspecAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jucmnav.turn.turn.ConcreteURNspec <em>Concrete UR Nspec</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jucmnav.turn.turn.ConcreteURNspec
   * @generated
   */
  public Adapter createConcreteURNspecAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jucmnav.turn.turn.Concern <em>Concern</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jucmnav.turn.turn.Concern
   * @generated
   */
  public Adapter createConcernAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jucmnav.turn.turn.Condition <em>Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jucmnav.turn.turn.Condition
   * @generated
   */
  public Adapter createConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jucmnav.turn.turn.ConcreteCondition <em>Concrete Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jucmnav.turn.turn.ConcreteCondition
   * @generated
   */
  public Adapter createConcreteConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jucmnav.turn.turn.URNlink <em>UR Nlink</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jucmnav.turn.turn.URNlink
   * @generated
   */
  public Adapter createURNlinkAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jucmnav.turn.turn.Metadata <em>Metadata</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jucmnav.turn.turn.Metadata
   * @generated
   */
  public Adapter createMetadataAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jucmnav.turn.turn.URNmodelElement <em>UR Nmodel Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jucmnav.turn.turn.URNmodelElement
   * @generated
   */
  public Adapter createURNmodelElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jucmnav.turn.turn.ArtificialRule <em>Artificial Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jucmnav.turn.turn.ArtificialRule
   * @generated
   */
  public Adapter createArtificialRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jucmnav.turn.turn.Text <em>Text</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jucmnav.turn.turn.Text
   * @generated
   */
  public Adapter createTextAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jucmnav.turn.turn.LongName <em>Long Name</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jucmnav.turn.turn.LongName
   * @generated
   */
  public Adapter createLongNameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jucmnav.turn.turn.Actor <em>Actor</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jucmnav.turn.turn.Actor
   * @generated
   */
  public Adapter createActorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jucmnav.turn.turn.IntentionalElement <em>Intentional Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jucmnav.turn.turn.IntentionalElement
   * @generated
   */
  public Adapter createIntentionalElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jucmnav.turn.turn.ElementLink <em>Element Link</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jucmnav.turn.turn.ElementLink
   * @generated
   */
  public Adapter createElementLinkAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jucmnav.turn.turn.Contribution <em>Contribution</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jucmnav.turn.turn.Contribution
   * @generated
   */
  public Adapter createContributionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jucmnav.turn.turn.Decomposition <em>Decomposition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jucmnav.turn.turn.Decomposition
   * @generated
   */
  public Adapter createDecompositionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jucmnav.turn.turn.Dependency <em>Dependency</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jucmnav.turn.turn.Dependency
   * @generated
   */
  public Adapter createDependencyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jucmnav.turn.turn.StrategiesGroup <em>Strategies Group</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jucmnav.turn.turn.StrategiesGroup
   * @generated
   */
  public Adapter createStrategiesGroupAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jucmnav.turn.turn.EvaluationStrategy <em>Evaluation Strategy</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jucmnav.turn.turn.EvaluationStrategy
   * @generated
   */
  public Adapter createEvaluationStrategyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jucmnav.turn.turn.ConcreteStrategy <em>Concrete Strategy</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jucmnav.turn.turn.ConcreteStrategy
   * @generated
   */
  public Adapter createConcreteStrategyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jucmnav.turn.turn.Evaluation <em>Evaluation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jucmnav.turn.turn.Evaluation
   * @generated
   */
  public Adapter createEvaluationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jucmnav.turn.turn.IndicatorEvaluation <em>Indicator Evaluation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jucmnav.turn.turn.IndicatorEvaluation
   * @generated
   */
  public Adapter createIndicatorEvaluationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jucmnav.turn.turn.IndicatorConversion <em>Indicator Conversion</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jucmnav.turn.turn.IndicatorConversion
   * @generated
   */
  public Adapter createIndicatorConversionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jucmnav.turn.turn.LinearConversion <em>Linear Conversion</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jucmnav.turn.turn.LinearConversion
   * @generated
   */
  public Adapter createLinearConversionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jucmnav.turn.turn.QualToQMappings <em>Qual To QMappings</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jucmnav.turn.turn.QualToQMappings
   * @generated
   */
  public Adapter createQualToQMappingsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jucmnav.turn.turn.QualToQMapping <em>Qual To QMapping</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jucmnav.turn.turn.QualToQMapping
   * @generated
   */
  public Adapter createQualToQMappingAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jucmnav.turn.turn.ContributionContextGroup <em>Contribution Context Group</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jucmnav.turn.turn.ContributionContextGroup
   * @generated
   */
  public Adapter createContributionContextGroupAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jucmnav.turn.turn.ContributionContext <em>Contribution Context</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jucmnav.turn.turn.ContributionContext
   * @generated
   */
  public Adapter createContributionContextAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jucmnav.turn.turn.ContributionChange <em>Contribution Change</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jucmnav.turn.turn.ContributionChange
   * @generated
   */
  public Adapter createContributionChangeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jucmnav.turn.turn.UCMmap <em>UC Mmap</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jucmnav.turn.turn.UCMmap
   * @generated
   */
  public Adapter createUCMmapAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jucmnav.turn.turn.Path <em>Path</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jucmnav.turn.turn.Path
   * @generated
   */
  public Adapter createPathAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jucmnav.turn.turn.StartPoint <em>Start Point</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jucmnav.turn.turn.StartPoint
   * @generated
   */
  public Adapter createStartPointAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jucmnav.turn.turn.PathBody <em>Path Body</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jucmnav.turn.turn.PathBody
   * @generated
   */
  public Adapter createPathBodyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jucmnav.turn.turn.PathBodyNode <em>Path Body Node</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jucmnav.turn.turn.PathBodyNode
   * @generated
   */
  public Adapter createPathBodyNodeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jucmnav.turn.turn.RegularEnd <em>Regular End</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jucmnav.turn.turn.RegularEnd
   * @generated
   */
  public Adapter createRegularEndAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jucmnav.turn.turn.EndpointWithConnect <em>Endpoint With Connect</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jucmnav.turn.turn.EndpointWithConnect
   * @generated
   */
  public Adapter createEndpointWithConnectAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jucmnav.turn.turn.ReferencedEnd <em>Referenced End</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jucmnav.turn.turn.ReferencedEnd
   * @generated
   */
  public Adapter createReferencedEndAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jucmnav.turn.turn.RespRef <em>Resp Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jucmnav.turn.turn.RespRef
   * @generated
   */
  public Adapter createRespRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jucmnav.turn.turn.OrJoin <em>Or Join</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jucmnav.turn.turn.OrJoin
   * @generated
   */
  public Adapter createOrJoinAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jucmnav.turn.turn.AndJoin <em>And Join</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jucmnav.turn.turn.AndJoin
   * @generated
   */
  public Adapter createAndJoinAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jucmnav.turn.turn.WaitingPlace <em>Waiting Place</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jucmnav.turn.turn.WaitingPlace
   * @generated
   */
  public Adapter createWaitingPlaceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jucmnav.turn.turn.Timer <em>Timer</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jucmnav.turn.turn.Timer
   * @generated
   */
  public Adapter createTimerAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jucmnav.turn.turn.Connect <em>Connect</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jucmnav.turn.turn.Connect
   * @generated
   */
  public Adapter createConnectAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jucmnav.turn.turn.ConnectElement <em>Connect Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jucmnav.turn.turn.ConnectElement
   * @generated
   */
  public Adapter createConnectElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jucmnav.turn.turn.FailurePoint <em>Failure Point</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jucmnav.turn.turn.FailurePoint
   * @generated
   */
  public Adapter createFailurePointAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jucmnav.turn.turn.EndPoint <em>End Point</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jucmnav.turn.turn.EndPoint
   * @generated
   */
  public Adapter createEndPointAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jucmnav.turn.turn.OrFork <em>Or Fork</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jucmnav.turn.turn.OrFork
   * @generated
   */
  public Adapter createOrForkAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jucmnav.turn.turn.OrBody <em>Or Body</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jucmnav.turn.turn.OrBody
   * @generated
   */
  public Adapter createOrBodyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jucmnav.turn.turn.RegularOrFork <em>Regular Or Fork</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jucmnav.turn.turn.RegularOrFork
   * @generated
   */
  public Adapter createRegularOrForkAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jucmnav.turn.turn.AndFork <em>And Fork</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jucmnav.turn.turn.AndFork
   * @generated
   */
  public Adapter createAndForkAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jucmnav.turn.turn.Stub <em>Stub</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jucmnav.turn.turn.Stub
   * @generated
   */
  public Adapter createStubAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jucmnav.turn.turn.StubParameters <em>Stub Parameters</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jucmnav.turn.turn.StubParameters
   * @generated
   */
  public Adapter createStubParametersAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jucmnav.turn.turn.StubDeclaration <em>Stub Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jucmnav.turn.turn.StubDeclaration
   * @generated
   */
  public Adapter createStubDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jucmnav.turn.turn.StubOutPath <em>Stub Out Path</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jucmnav.turn.turn.StubOutPath
   * @generated
   */
  public Adapter createStubOutPathAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jucmnav.turn.turn.PluginBinding <em>Plugin Binding</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jucmnav.turn.turn.PluginBinding
   * @generated
   */
  public Adapter createPluginBindingAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jucmnav.turn.turn.ComponentRef <em>Component Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jucmnav.turn.turn.ComponentRef
   * @generated
   */
  public Adapter createComponentRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jucmnav.turn.turn.BoundOption <em>Bound Option</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jucmnav.turn.turn.BoundOption
   * @generated
   */
  public Adapter createBoundOptionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jucmnav.turn.turn.BoundElement <em>Bound Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jucmnav.turn.turn.BoundElement
   * @generated
   */
  public Adapter createBoundElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jucmnav.turn.turn.ReferencedBoundElement <em>Referenced Bound Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jucmnav.turn.turn.ReferencedBoundElement
   * @generated
   */
  public Adapter createReferencedBoundElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jucmnav.turn.turn.LongBoundElement <em>Long Bound Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jucmnav.turn.turn.LongBoundElement
   * @generated
   */
  public Adapter createLongBoundElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jucmnav.turn.turn.Binding <em>Binding</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jucmnav.turn.turn.Binding
   * @generated
   */
  public Adapter createBindingAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jucmnav.turn.turn.InBinding <em>In Binding</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jucmnav.turn.turn.InBinding
   * @generated
   */
  public Adapter createInBindingAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jucmnav.turn.turn.OutBinding <em>Out Binding</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jucmnav.turn.turn.OutBinding
   * @generated
   */
  public Adapter createOutBindingAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jucmnav.turn.turn.ComponentBinding <em>Component Binding</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jucmnav.turn.turn.ComponentBinding
   * @generated
   */
  public Adapter createComponentBindingAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jucmnav.turn.turn.FailureLabel <em>Failure Label</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jucmnav.turn.turn.FailureLabel
   * @generated
   */
  public Adapter createFailureLabelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jucmnav.turn.turn.ScenarioGroup <em>Scenario Group</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jucmnav.turn.turn.ScenarioGroup
   * @generated
   */
  public Adapter createScenarioGroupAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jucmnav.turn.turn.ScenarioDef <em>Scenario Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jucmnav.turn.turn.ScenarioDef
   * @generated
   */
  public Adapter createScenarioDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jucmnav.turn.turn.Initialization <em>Initialization</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jucmnav.turn.turn.Initialization
   * @generated
   */
  public Adapter createInitializationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jucmnav.turn.turn.Variable <em>Variable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jucmnav.turn.turn.Variable
   * @generated
   */
  public Adapter createVariableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jucmnav.turn.turn.EnumerationType <em>Enumeration Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jucmnav.turn.turn.EnumerationType
   * @generated
   */
  public Adapter createEnumerationTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jucmnav.turn.turn.PathBodyNodes <em>Path Body Nodes</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jucmnav.turn.turn.PathBodyNodes
   * @generated
   */
  public Adapter createPathBodyNodesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //TurnAdapterFactory
